CREATE OR REPLACE PACKAGE PKG_POSTULACION_INDIGENAS IS
  v_porc_asig_proyecto NUMBER(5,3);
  v_mensaje_error VARCHAR2(255);

  FUNCTION F_OBT_PORC_ASIG_ZONA (p_numrun NUMBER, p_zona_extrema NUMBER) RETURN NUMBER;
  PROCEDURE P_GRABAR_ERROR (p_rutina_error VARCHAR2, p_mensaje_error VARCHAR2);
END PKG_POSTULACION_INDIGENAS;
/

CREATE OR REPLACE PACKAGE BODY PKG_POSTULACION_INDIGENAS IS
  FUNCTION F_OBT_PORC_ASIG_ZONA (p_numrun NUMBER, p_zona_extrema NUMBER) RETURN NUMBER IS
    v_porc_asig_zextrema NUMBER(5,3);
  BEGIN
    SELECT porc_asig_zextrema / 100
    INTO v_porc_asig_zextrema
    FROM PORC_ASIG_ZONA_EXTREMA
    WHERE p_zona_extrema BETWEEN zona_extrema_ini AND zona_extrema_ter;
    
    RETURN v_porc_asig_zextrema;
  EXCEPTION
    WHEN OTHERS THEN
      v_mensaje_error := SQLERRM;
      P_GRABAR_ERROR('Error en la fn F_OBT_PORC_ASIG_ZONA al encontrar la zona extrema del postulante con run: ' || p_numrun, v_mensaje_error);
      RETURN 0;
  END F_OBT_PORC_ASIG_ZONA;

  PROCEDURE P_GRABAR_ERROR (p_rutina_error VARCHAR2, p_mensaje_error VARCHAR2) IS
  BEGIN
    INSERT INTO ERROR_PROCESO
    VALUES (SEQ_ERROR.NEXTVAL, p_rutina_error, p_mensaje_error);
    COMMIT;
  END P_GRABAR_ERROR;
END PKG_POSTULACION_INDIGENAS;
/

CREATE OR REPLACE TRIGGER TRG_RESULTADO_POSTULACION 
AFTER INSERT ON DETALLE_POSTULACION_PROYECTO
FOR EACH ROW
DECLARE
  v_porc_asignado NUMBER(4,1);
  v_mensaje_postulacion VARCHAR2(30);
BEGIN
  v_porc_asignado := (:NEW.MONTO_ASIGNADO * 100) / :NEW.MONTO_SOLICITADO;
  
  IF v_porc_asignado >= 50 THEN
    v_mensaje_postulacion := 'PROYECTO FINANCIADO';
  ELSE
    v_mensaje_postulacion := 'PROYECTO NO FINANCIADO';
  END IF;
  
  INSERT INTO RESULTADO_POSTULACION
  VALUES (:NEW.run_postulante, v_porc_asignado || '%', v_mensaje_postulacion);
END TRG_RESULTADO_POSTULACION;
/



CREATE OR REPLACE FUNCTION F_OBT_PORC_ASIG_PUEBLO (p_cod_pueblo_ind NUMBER) RETURN NUMBER IS
  v_porc_asig_pueblo_ind NUMBER(5,3);
  v_mensaje_error VARCHAR2(255);
BEGIN
  BEGIN
    SELECT porc_asig_pueblo_ind / 100
    INTO v_porc_asig_pueblo_ind
    FROM PORC_ASIG_PUEBLO_INDIGENA
    WHERE cod_pueblo_ind = p_cod_pueblo_ind;
  EXCEPTION
    WHEN OTHERS THEN
      v_mensaje_error := SQLERRM;
      PKG_POSTULACION_INDIGENAS.P_GRABAR_ERROR(SUBSTR('Error en la fn F_OBT_PORC_ASIG_PUEBLO al encontrar porc_asig_pi postulante con run: ' || p_cod_pueblo_ind, 1, 100), v_mensaje_error);
      RETURN 0;
  END;
  RETURN v_porc_asig_pueblo_ind;
END F_OBT_PORC_ASIG_PUEBLO;
/

CREATE OR REPLACE PROCEDURE SP_DETALLE_POSTULACION(p_fecha_proceso NUMBER) IS
  -- Cursor principal
  CURSOR cur_detalles_postulante IS
    SELECT a.numrun,
           a.dvrun,
           INITCAP(a.pnombre || ' ' || a.snombre || ' ' || a.apaterno || ' ' || a.amaterno) nombre_completo,
           r.zona_extrema,
           a.cod_pueblo_ind,
           pp.monto_solicitado,
           pp.cod_proyecto ,pr.cod_tp_proyecto
    FROM antecedentes_personales a
         JOIN region r ON a.cod_region = r.cod_region
         JOIN postulacion_proyecto pp ON a.numrun = pp.numrun   
         JOIN proyecto pr ON pr.cod_proyecto = pp.cod_proyecto
         
    WHERE p_fecha_proceso = TO_CHAR(fecha_postulacion, 'YYYY')
    ORDER BY numrun;

  -- Variables
  v_monto_asig_extrema NUMBER(8);
  v_porc_zextrema NUMBER(5,3);
  v_porc_asig_pueblo_ind NUMBER(4,2);
  v_asig_pueblo_indigena NUMBER(8);
  v_porc_asig_proy NUMBER(4,2);
  v_monto_asig_proy NUMBER(8);
  v_total_monto_asignaciones NUMBER(8);
  v_monto_extra NUMBER(10);
  
  

BEGIN
  EXECUTE IMMEDIATE 'TRUNCATE TABLE DETALLE_POSTULACION_PROYECTO';
  EXECUTE IMMEDIATE 'TRUNCATE TABLE ERROR_PROCESO';
  EXECUTE IMMEDIATE 'TRUNCATE TABLE RESULTADO_POSTULACION';
  EXECUTE IMMEDIATE 'ALTER SEQUENCE SEQ_ERROR RESTART START WITH 1';

  FOR reg_postulante IN cur_detalles_postulante LOOP
    -- Se obtiene el porcentaje de zona extrema de cada usuario
    v_porc_zextrema := PKG_POSTULACION_INDIGENAS.F_OBT_PORC_ASIG_ZONA(reg_postulante.numrun, reg_postulante.zona_extrema);
    v_monto_asig_extrema := v_porc_zextrema * reg_postulante.monto_solicitado;

    -- Se obtiene la asignación por pueblo indígena---
    v_porc_asig_pueblo_ind:= F_OBT_PORC_ASIG_PUEBLO (reg_postulante.cod_pueblo_ind);
    v_asig_pueblo_indigena := v_porc_asig_pueblo_ind * reg_postulante.monto_solicitado;

    -- Se obtiene el monto de asignación del proyecto--
    SELECT porc_asig_proy / 100
    INTO v_porc_asig_proy
    FROM PORC_ASIG_PROYECTO
    WHERE cod_proyecto = reg_postulante.cod_proyecto;
    v_monto_asig_proy := v_porc_asig_proy * reg_postulante.monto_solicitado;

   ---Se obtiene el monto especial
   IF reg_postulante.cod_tp_proyecto IN (10) THEN 
   v_monto_extra:=reg_postulante.monto_solicitado*0.1;
   ELSE
   v_monto_extra:=0;    
   END IF;
    

    -- Se obtiene el monto asignado (falta el especial)
    v_total_monto_asignaciones := v_monto_asig_extrema + v_asig_pueblo_indigena + v_monto_asig_proy + v_monto_extra;

    INSERT INTO DETALLE_POSTULACION_PROYECTO
    VALUES (TO_CHAR(reg_postulante.numrun, '09G999G999') || '-' || reg_postulante.dvrun,
            reg_postulante.nombre_completo,
            v_monto_asig_extrema,
            v_asig_pueblo_indigena,
            v_monto_asig_proy,
            v_monto_extra,
            v_total_monto_asignaciones,
            reg_postulante.monto_solicitado);
  END LOOP;
END; 
/
EXEC SP_DETALLE_POSTULACION(2023);    
